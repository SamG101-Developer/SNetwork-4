from cryptography.hazmat.primitives.hashes import Hash, SHA3_512
from crypto_engines.tools.secure_bytes import SecureBytes


class Hashing:
    """
    Hashing is used to produce fixed length messages from any length input. This keeps signatures short, and is also
    used to ensure that a party knows a secret without revealing the secert.
    """
    ALGORITHM = SHA3_512

    @staticmethod
    def hash(input_bytes: SecureBytes) -> SecureBytes:
        print("HASH IN: ", input_bytes.raw)
        # Hash the input bytes and return the result.
        hash_engine = Hash(Hashing.ALGORITHM())
        hash_engine.update(input_bytes.raw)
        hashed = SecureBytes(hash_engine.finalize())
        print("HASH OUT: ", hashed.raw)
        return hashed


# if __name__ == "__main__":
#     import base58
#     input_ = "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"
#     input_ = base58.b58decode(input_)
#     secure_bytes = SecureBytes(input_)
#     hashed = Hashing.hash(secure_bytes)
#     print(hashed)
